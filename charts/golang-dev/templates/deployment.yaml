apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "golang-dev.fullname" . }}
  labels:
    {{- include "golang-dev.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "golang-dev.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "golang-dev.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if .Values.dependencies }}
      initContainers:
        - name: wait-for-dependencies
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ if eq (.Values.image.tag | default .Chart.AppVersion) "latest" }}Always{{ else }}{{ .Values.image.pullPolicy }}{{ end }}
          env:
          {{- range $key, $value := .Values.envVars }}
            - name: {{ $key }}
              value: {{ $value | quote }}
          {{- end }}
          command:
            - /bin/sh
            - -c
            - |
              echo "Waiting for dependencies to be ready..."
              {{- range $service, $address := .Values.serviceDependencies }}
              until nc -z -w 2 {{ $address | split ":" | first }} {{ $address | split ":" | last }}; do
                echo "Waiting for {{ $service }} at {{ $address }}..."
                sleep 2
              done
              echo "{{ $service }} is ready."
              {{- end }}
              echo "All dependencies are ready."
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ if eq (.Values.image.tag | default .Chart.AppVersion) "latest" }}Always{{ else }}{{ .Values.image.pullPolicy }}{{ end }}
          env:
          {{- range $key, $value := .Values.envVars }}
            - name: {{ $key }}
              value: {{ $value | quote }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          {{- if .Values.cmd }}
          command:
            - /bin/sh
            - -c
            - |
              {{ .Values.cmd }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- with .Values.volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- with .Values.volumes }}
      volumes:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
